RC2 - "Robot Controller 2"

* Task API
** API surface
The RC2 API is task-based, exposing mechanisms for adding, removing, and retrieving tasks. The API
provides these via a REST-style API surface which interacts with a centralized task store.

*** API Methods
Note: All of these paths are relative to /api/v1/.

*Tasks*
=GET /tasks= - lists tasks, along with their current state. Query parameters allow for sorting by
creation or update time, and filtering by state.
=GET /tasks/<task-id>= - gets a specific task by ID.
=POST /tasks= - add a new task.
=DELETE /tasks/<task-id>= - remove a task and halt further execution on it.

*Events*
=GET /events= - lists events. Query parameters allow for sorting by creation time, or filtering by
state or task.
=GET /events/<event-id>= - gets a specific event by ID.

/Note: events cannot be deleted or added by the user; they are managed by the system./

*Metadata*
=GET /status= - get the current state of the robot.
=GET /meta= - get metadata about the current server, such as uptime and load.

** Conceptual overview
*** Tasks and events
**** Tasks
When a new task is received, it is added to a task listing and assigned an ID. The task listing is a
mapping from ID to task description, where each task's ID is both /sequential/ and /unique/. The
listing tracks the next ID available for assignment.

#+NAME Task structure example
#+begin_src clojure
  {
   ;; Required keys
   :id 1 ;; Unique, sequential ID of this task
   :created 12345 ;; Time the task was created
   :type :move ;; The type of the task
   :update 12345 ;; The ID of the latest event for this task
   :state :processing ;; The current state of the task. One of :new, :processing, :complete,
                      ;; :canceled, or :failed.
   :affinity serial ;; Exclusivity of the task - serial or parallel.

   ;; Optional keys. These depend on the task type.
   :destination {:x 1 :y 2 :z 3} ;; Cartesian coordinate destination for :move tasks
  }
#+end_src

**** Events
Events are used to log state transitions for each task. They are tracked in a mapping just like
tasks, from the event ID to the event description. Each event is associated with a single task, and
describes a single state transition for that task.

#+NAME Event structure example
#+begin_src clojure
  {
   :id 1 ;; ID of this event
   :task 1 ;; ID of the task this event is attached to
   :created 12345 ;; The creation time of this event
   :changed {:state :complete} ;; The change that occurred as a result of this event
   :errors nil ;; Data about errors encountered during processing. If the task failed, the event will
               ;; have an exception and log message to aid debugging. Otherwise, this is nil.
  }
#+end_src

**** History
The event log contains the complete history of each task. When a new task is created, an event will
be added to the log showing the creation:

#+begin_src clojure
  {
   :id 1
   :task 1
   :created 12345
   :changed {:state :new
             :type :move
             :destination {:x 1 :y 2 :z 3}}
  }
#+end_src

Each update to task state will have its own event:

#+begin_src clojure
  {
   :id 2
   :task 1
   :created 12346
   :changed {:state :processing}
  }
#+end_src

Using the event log, the state of the system can be reconstructed as it was at any point during the
system lifetime.

*** Execution
**** State transition model
When a task is first added to the queue it is in state ~:new~. This state indicates that no
processing has yet been performed on the task. When a worker becomes available, the task will be
removed from the queue and move to state ~:processing~. The worker will perform any state
transitions or I/O operations required to complete the task, and update it to state ~:complete~ when
all the sub-tasks are finished. At each point in the process, new events will be created to track
state transitions for the task.

**** Worker pools
Some types of tasks require exclusive access to the robot, such as ~:move~ commands. Others are able
to be executed at any time, independent of other tasks. Exclusionary and non-exclusionary tasks are
executed in different worker pools. The exclusionary pool consists of a single worker, whereas the
non-exclusionary pool can have any number of workers as supported by the underlying
platform. Non-exclusionary tasks can be made to execute on the exclusionary queue by setting the
~:affinity~ field on the task to ~serial~.

**** Task dispatch
Communication of tasks between workers is performed using asynchronous queues. When a task is
created, state information as described above is added by the creating worker to the state model and
the task ID is passed into a dispatch queue. The ID is then dequeued by a dispatch worker which
looks up the type of the task and adds it to either an exclusionary or non-exclusionary queue. These
queues are then serviced by worker pools which execute the tasks using core library functions and
update their state. When a task is dequeued for processing, it is updated to the ~:processing~
state, and when it is completed the worker updates its state to ~:complete~.

**** Cancellation and failures
Cancellation is performed by enqueuing a task ID into a special 'cancellation queue'. This queue is
consumed by a worker which simply updates the task state to ~:cancelled~. If another worker dequeues
this task, it will discard it without further processing. Once a task has begun processing, it can
no longer be cancelled.

**** Flow diagram

#+begin_src ditaa :file comms-flow.png

  +----------+     +-------------------+     +-------------------+
  | Dispatch |     |   Exclusionary    |     |    Exclusionary   |
  |  Queue   |---->|      Queue        |---->|      Worker       |
  |   {s}    |     |       {s}         |  +->|                   |
  |          |     +-------------------+  |  +-------------------+
  |          |                            |
  |          |     +-------------------+  |  +-------------------+
  |          |     |  NonExclusionary  |  |  |  NonExclusionary  |
  |          |---->|      Queue        |--+->|      Worker       |
  |          |     |       {s}         |  +->|                   |
  +----------+     +-------------------+  |  +-------------------+
                                          |
  +----------+                            |
  | Cancel   |                            |
  | Queue    |                            |
  |   {s}    |----------------------------+
  |          |
  |          |
  +----------+

#+end_src

** Details
*** Task fields
When creating a new task, the programmer specifies the task type and any additional parameters
required by that type. The currently supported task types are :move, :connect.

**** Movement tasks
Movement tasks direct the robot to change its position in the workspace. These tasks always have
a :serial affinity, meaning they must be executed sequentially.
- Type: :move
- Affinity: :serial
- Parameters:
  - destination: A map of coordinate pairs describing the destination location. The format of this
    map is determined by the currently installed RobotDescriptor.
  - speeds: A map containing the desired motor operating speeds and accelerations. This map should
    follow the convention set by the currently installed RobotDriver.

**** Connection tasks
Connection tasks direct the server to switch its connection to a new device. Only one connection can
be maintained per server and these tasks always have a :serial affinity.
- Type: :connect
- Affinity: :serial
- Parameters:
  - device: The path to the device to connect to.
  - device-type: The type of device. Currently, only :serial is supported.
  - baud-rate: For serial devices, the speed of the connection.

**** Calibration tasks
Calibration tasks set calibration parameters on the currently installed RobotDriver. It is up to the
driver to determine what to do with the settings. It is permissible for a driver to instruct the
robot to calibrate itself if possible, or to take settings directly via the API.
- Type: :calibrate
- Affinity: :serial
- Parameters: A map of calibration values. These are device specific and it is up to the programmer
  to understand what the driver expects.

* Executing Pick and Place Operations

The Delta robot is primarily designed to perform Pick and Place (P&P) operations of the sort
required during circuit board fabrication. At a high level, the general procedure for performing
such an operation goes like this:

  1. Identify the locations of "sources" and "sinks" - in this case, part dispensers and their
     destinations on the board.
  2. Plan a route for the arm to take which allows it to populate each sink from the correct source.
  3. Execute the route for each part.

In the RC2 Task API model, these operations are carried out by a combination of the client and
server. The client is responsible for providing UI for the programmer to specify sources and sinks,
displaying the resulting plan, and communicating with the server to specify tasks for the robot to
perform. The server executes tasks as requested by the client, including moves and
calibrations. Planning also occurs on the server via the Task API - this is so that clients can make
use of the planning facilities without having to rewrite them.

In more detail, the process looks like this:

  1. Using the desired client, the programmer specifies sink and source locations and orientations.
  2. The client issues a request for path planning, giving the desired sink and source
     configuration in the request.
  3. The client displays the planned path to the programmer, who then edits it or adjusts
     sink/source configuration as necessary.
  4. When the path looks good, the programmer requests execution of the plan. The client issues
     tasks for each path segment and interactively updates the interface to display the state of the
     robot.

* The RC2 Web Client

  The default client for the RC2 API is a web-based application written in ClojureScript and
included with the RC2 server. The application can be launched by requesting the root page of a
running API server, and provides a graphical, interactive environment for:

  - specifying components,
  - setting source and sink locations,
  - controlling robot position,
  - visualizing planner output,
  - interactively executing planned routes
  - etc.

** State management on the client

   Architecturally, the client is broken into two major components. All of the application state
   which is persistent across frames or originates from user input is handled in the rc2.state
   namespace. This includes event handlers and transformation functions which alter the previous
   frame's state prior to rendering each frame. All of the drawing functions are kept separately, in
   the rc2.draw namespace. Drawing functions have access only to a snapshot of the application state
   for the current frame, and no modifications to that state are allowed to exit the namespace. This
   simplifies state management significantly, as all modification to the application state occurs
   centrally and functionally.

   To preserve these properties, the majority of state transformation occurs through the function
   =apply-state-transforms=. This function takes a state snapshot and a sequence of transform
   definitions and yields an updated state snapshot obtained by applying each of the transforms in
   order. Each transform provides a pair of paths to its input and output and a function which takes
   the input and yields the desired output.

   =apply-state-transforms= applies each transform to the value located in the state snapshot at the
   input path and stores the resulting value under the output path. By doing this, the transform
   functions are able to be written generically - for example, the =copy= transform simply copies
   the value from the input path to the output path, and can be applied anywhere in the state tree
   without modification. Additionally, most modifications to the structure of the application state
   are trivial to make, as only the relevant paths in the transform definitions need be modified.

   Because =apply-state-transforms= is a pure function with no side effects (though its transforms
   may not be), it is possible to use in transform functions themselves. The =handle-button-actions=
   transform does this in order to provide similarly generic actions to UI elements. Buttons in the
   application include a transform which updates portions of the state tree in the same way that
   the general transforms do, and these actions will be carried out when the button is clicked.

** Coordinate systems

   The RC2 client uses an HTML5 Canvas to render its interface. Because the screen coordinate system
   does not match the real-world coordinate system used by the robot, a set of convenience functions
   are provided for converting between world and canvas coordinates. Because these conversions are
   cheap and easily reversible, functions taking coordinate parameters should convert all parameters
   to the desired coordinate space explicitly rather than rely on callers to provide coordinates of
   a specific type. Note that the RC2 REST API only deals in world coordinates; there is no concept
   of a canvas coordinate outside of the client.

* Unimplemented Features
** Base Feature Set
  - [ ] Display event log

** Intermediate Features
  - [ ] Provide UI/API for calibrating the robot
  - [ ] Consider part orientations in planning phase
  - [ ] Generate GCode to drive Rostock electronics
  - [ ] Save and load calibration data, plans, etc. to and from persistent storage

** Advanced Features
  - [ ] Capture imagery from arm-mounted camera

* Engineering
These concerns affect the quality of the codebase, and will probably need to be addressed as the
application complexity increases.

** UI wiring complexity
I'm a little concerned about how complex it's getting to add new behaviors to the UI. The wiring is
convoluted and requires touching a lot of places; there's got to be a better way to hook things up
so that the concerns are better separated. The current implementation is quite naive, and I think
with some more thought it can be improved significantly. This extends not only to buttons, but to
modes as well - they seem like they could be much better encapsulated than they are now. Maybe the
better way to go is to separate out the visualization and input UI elements and do the inputs in
plain HTML.

** Test coverage
A lot of this code doesn't have tests. It shouldn't be too difficult to test, given the dependencies
are mostly explicit - but this requires time and effort that is hard to come by sometimes.

** Server vs client state
Right now the server/client state synchronization is quite ad-hoc - it should be formalized. It
probably makes sense to have a separate state machine within the client code that mirrors the server
state and allows easier transformations on it.
